1.x
<a v-link = 'path:xxx}'></a>

2.x
> 一个完整的路由分四步

- 创建模板
- 配置路由
- 生成路由
- 启动路由

首先，应该在html文件内创建一个路由标签``<router-link to="path"></router-link>``，其中的``path``为路由地址
再创建一个``<router-view></router-view>``标签用于显示路由的内容，其内容在路由模板内写

**创建模板**
```
var 模板名 = {
    template:'模板内容'
}
```
如果需要多行的话则可以用``'`'``符号加上一层根元素包裹
```
template:`<div>
<p>这里是第一行</p>
<p>这里是第二行</p>
</div>`
```

**配置路由**
配置路由时创建的变量名必须为``routes``，配置路由也就是将**模板**和**地址**链接起来，类型为**数组类型**
```
var routes = [
    {path:'地址',component:模板名}
    //例如：router-link中的地址为“/home”，模板名为“Home”
    {path:'/home',component:Home}
]
```

**生成路由**
创建一个路由名，其值为实例化路由对象，传入的参数为配置时的变量名
```
var router = new VueRouter({
    routes
})
```
**启动路由**
在Vue实例化对象内启动
```
new Vue({
    router,
    el:'#app'
})
```

**注意：**
- 选中的``router-link``会有一个类叫做``router-link-exact-active``，只有选中的链接才会有
- 设置打开网页时默认打开的页面用属性``redirect``，在配置路由配置
```
var routes = [
    {path:'',component:...},
    {path:'/',redirect:'/home'}
]
```

#### router 内的两个方法
- router.push({path:'/...'})
直接添加一个路由，表现的方式为切换路由，跟点击效果是一样的，可以使用浏览器中的“上一步”
- router.replace({path:'/...'})
替换路由，不会在历史记录里显示，无法使用浏览器“上一步”

##### 参数传递
